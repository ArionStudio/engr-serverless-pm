AWSTemplateFormatVersion: "2010-09-09"
Description: Private S3 + Cognito Identity Pool for browser extension (temporary creds, strict CORS)

Parameters:
  BucketName:
    Type: String
    Description: Globally unique S3 bucket name
  ExtensionOrigins:
    Type: CommaDelimitedList
    Description: Comma-separated list of allowed CORS origins (e.g., chrome-extension://id,https://your.site)
  UseKMS:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "false"
    Description: Use SSE-KMS by default and require it on uploads
  KMSKeyArn:
    Type: String
    Default: ""
    Description: KMS CMK ARN to use when UseKMS=true
  UserPrefix:
    Type: String
    Default: "user/"
    Description: Object key prefix to scope permissions (e.g., user/)
  IdentityPoolName:
    Type: String
    Default: "S3ExtPool"
  RoleName:
    Type: String
    Default: "CognitoS3ExtRole"
  LifecycleEnabled:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"
    Description: Enable S3 Lifecycle to clean up noncurrent versions and incomplete uploads
  NoncurrentVersionExpirationDays:
    Type: Number
    Default: 30
    Description: Days after which noncurrent object versions are permanently deleted
  AbortIncompleteMultipartUploadDays:
    Type: Number
    Default: 7
    Description: Days after which incomplete multipart uploads are aborted

Conditions:
  UseKMSCond: !Equals [!Ref UseKMS, "true"]
  IsLifecycleEnabled: !Equals [!Ref LifecycleEnabled, "true"]

Resources:
  # S3 data bucket
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT, HEAD]
            AllowedOrigins: !Ref ExtensionOrigins
            AllowedHeaders: ["*"]
            ExposedHeaders: ["ETag", "x-amz-version-id"]
            MaxAge: 300
      LifecycleConfiguration: !If
        - IsLifecycleEnabled
        - Rules:
            - Id: CleanupNoncurrentVersions
              Status: Enabled
              Prefix: !Ref UserPrefix
              NoncurrentVersionExpiration:
                NoncurrentDays: !Ref NoncurrentVersionExpirationDays
            - Id: AbortIncompleteMultipartUploads
              Status: Enabled
              Prefix: !Ref UserPrefix
              AbortIncompleteMultipartUpload:
                DaysAfterInitiation: !Ref AbortIncompleteMultipartUploadDays
        - !Ref "AWS::NoValue"

  # Always enforce TLS
  DataBucketPolicyTLS:
    Type: AWS::S3::BucketPolicy
    DependsOn: DataBucket
    Properties:
      Bucket: !Ref DataBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyNonTLS
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !Sub "arn:aws:s3:::${DataBucket}"
              - !Sub "arn:aws:s3:::${DataBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: "false"

  # IAM policy for the Cognito role
  S3AccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${RoleName}-S3Access-${AWS::StackName}"
      Description: Least-privilege S3 access for the bucket and user prefix
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ListWithinPrefix
            Effect: Allow
            Action: ["s3:ListBucket"]
            Resource: !Sub "arn:aws:s3:::${DataBucket}"
            Condition:
              StringLike:
                s3:prefix: [!Sub "${UserPrefix}*"]
          - Sid: ListVersionsWithinPrefix
            Effect: Allow
            Action: ["s3:ListBucketVersions"]
            Resource: !Sub "arn:aws:s3:::${DataBucket}"
            Condition:
              StringLike:
                s3:prefix: [!Sub "${UserPrefix}*"]
          - Sid: ObjectRW
            Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource: !Sub "arn:aws:s3:::${DataBucket}/${UserPrefix}*"
          - !If
            - UseKMSCond
            - Sid: KmsDecryptEncryptIfUsed
              Effect: Allow
              Action:
                - "kms:Encrypt"
                - "kms:Decrypt"
                - "kms:GenerateDataKey*"
                - "kms:DescribeKey"
              Resource: !Ref KMSKeyArn
              Condition:
                StringEquals:
                  kms:ViaService: !Sub "s3.${AWS::Region}.amazonaws.com"
            - !Ref "AWS::NoValue"

  # Cognito identity pool + role for unauth identities
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: true

  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      ManagedPolicyArns:
        - !Ref S3AccessPolicy

  CognitoRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoAuthRole.Arn

Outputs:
  BucketNameOut:
    Description: S3 bucket name
    Value: !Ref BucketName
    Export:
      Name: !Sub "${AWS::StackName}-BucketName"
  IdentityPoolIdOut:
    Description: Cognito Identity Pool ID
    Value: !Ref CognitoIdentityPool
    Export:
      Name: !Sub "${AWS::StackName}-IdentityPoolId"
  CognitoRoleArnOut:
    Description: Cognito role ARN
    Value: !GetAtt CognitoAuthRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-CognitoRoleArn"
  RegionOut:
    Description: Deployment region
    Value: !Ref "AWS::Region"
    Export:
      Name: !Sub "${AWS::StackName}-Region"
  PrefixOut:
    Description: Object key prefix scoped by policy
    Value: !Ref UserPrefix
    Export:
      Name: !Sub "${AWS::StackName}-Prefix"
  TemplateVersion:
    Description: Template version
    Value: "v4"
